#!/usr/bin/env ruby

#
# bootstrap
#

#
# Welcome to the ruvetia Bootstrap Script
#
puts ""
puts "Ruvetia.org bootstrap"
puts "================ "
puts ""
puts "! Logs will be written to: log/boostrap.log"
system ("echo 'Bootstrap started at #{Time.now}' > log/bootstrap.log")
puts ""

#
# lol constants
#
puts "database user:"
DB_USERNAME = gets.strip
puts "database password:"
DB_PASSWORD = gets.strip
DB_HOST = "localhost"
TEST_DATABASE = "ruvetia_test"
DEV_DATABASE = "ruvetia_development"

#
# Check for PostgreSQL
#
unless system("which psql 2>&1 > /dev/null")
  puts "x You need to install PostgreSQL. If you use Homebrew, you can run:"
  puts "  => brew install postgresql"
  exit(1)
else
  puts "+ PostgreSQL found."
end

#
# Check for Bundler
#
unless system("which bundle 2>&1 > /dev/null")
  puts "x You need to install Bundler:"
  puts "  => gem install bundler"
  exit(1)
else
  puts "+ Bundler found."
end

#
# Check for Heroku toolbelt
#
unless system("which heroku 2>&1 > /dev/null")
  puts "+ You need to install the Heroku toolbelt:"
  puts "  => https://toolbelt.heroku.com/"
  exit(1)
else
  puts "+ Heroku toolbelt found."
end


#
# Let's install some bundles
#
puts ""
puts "Installing bundles..."
system("bundle install >> log/bootstrap.log")

require "bundler/setup"
require 'erubis'

#
# Generate the database configuration
#
unless File.exists?("config/database.yml")
  input = File.read('config/database_template.yml.erb')
  template = Erubis::Eruby.new(input)    # create Eruby object

  list = ['aaa', 'bbb', 'ccc']
  content = template.result(:development_database => DEV_DATABASE,
                            :test_database => TEST_DATABASE,
                            :username => DB_USERNAME,
                            :password => DB_PASSWORD)
  File.open("config/database.yml", "w+") {|f| f.write content }
end

#
# Prepare Database
#
puts ""
puts "Should we set up the dev & test Databases for you?"
puts "WARNING: This will destroy existing databases named '#{DEV_DATABASE}'and '#{TEST_DATABASE}'!"
print "(y)es, (n)o  =>  "

case gets.strip
  when 'Y', 'y', 'yes'
    puts ""
    puts "Dropping all connections to #{DEV_DATABASE}..."
    system(%Q{psql postgres #{DB_USERNAME} --command="SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname='#{DEV_DATABASE}';" >> log/bootstrap.log})

    puts "Deleting old #{DEV_DATABASE}..."
    system("dropdb #{DEV_DATABASE} --username=#{DB_USERNAME} >> log/bootstrap.log")

    puts "Creating #{DEV_DATABASE}..."
    system("createdb --owner=#{DB_USERNAME} --username=#{DB_USERNAME} #{DEV_DATABASE} >> log/bootstrap.log")

    puts "Migrating #{DEV_DATABASE}..."
    system("rake db:migrate >> log/bootstrap.log")

    puts "Seeding #{DEV_DATABASE}..."
    system("rake db:seed >> log/bootstrap.log")

    puts "Deleting old #{TEST_DATABASE}..."
    system("dropdb #{TEST_DATABASE} --username=#{DB_USERNAME} >> log/bootstrap.log")

    puts "Creating #{TEST_DATABASE}..."
    system("createdb --owner=#{DB_USERNAME} --username=#{DB_USERNAME} #{TEST_DATABASE} >> log/bootstrap.log")

    puts "Preparing #{TEST_DATABASE}..."
    system("rake db:test:prepare >> log/bootstrap.log")
    system("rake db:test:load >> log/bootstrap.log")

    puts ""
    puts "DATABASES ARE READY!"
end


#
# Restart the Rails Server if it is running (for pow users)
#
puts ""
puts "Restarting app..."
system("touch tmp/restart.txt")

#
# RUN EM TESTS
#
puts ""
puts "Running tests..."
system("bundle exec rake test")

#
# DONE
#
puts ""
puts "Sweet, my job here is done!"
